lines(W[k:(k+1)], rep(x_val[k],2), col = j, lwd = 2)
}
lines(c(W[xt], t),rep(x_val[xt],2), col = j, lwd = 2)
}
n1 = 1000 #total simulations to estimate P{X(t)<100}
n2 = 10 #simulations to plot
lambda = 1.5 #rate parameter
t = 59 #days until March 1st
mu = lambda*t
#vector to store number of claims
Xt = vector('numeric',length = n1)
for (i in 1:n1){
xt = rpois(1,lambda=mu) #number of claims is Poisson distributed
Xt[i]=xt
}
#plots 10 realizations of {X(t):t=0,...,59}
plot(NULL, NULL, xlim = c(0, t), ylim = c(0, 110), xlab = "Days", ylab = "Number of claims", main = "X(t) : t=0,...,59", lwd = 2)
x <- c(0, t)
#boundaries for confidence bound, 2 times standard deviation
sdplus <- c(0, mu+2*sqrt(mu))
sdminus <- c(0, mu-2*sqrt(mu))
polygon(c(x, rev(x)), c(sdminus, rev(sdplus)), col = "snow2", border = NA)
for (j in 1:n2){
xt <- rpois(1,lambda = mu)
W <- sort(runif(n = xt, min = 0, max = t)) #waiting times are uniformly distributed, sorted in ascending order
x_val <- c(0:xt, xt)
for (k in 1:(xt-1)){
lines(W[k:(k+1)], rep(x_val[k],2), col = j, lwd = 2)
}
lines(c(W[xt], t),rep(x_val[xt],2), col = j, lwd = 2)
}
n1 = 1000 #total simulations to estimate P{X(t)<100}
n2 = 10 #simulations to plot
lambda = 1.5 #rate parameter
t = 59 #days until March 1st
mu = lambda*t
#vector to store number of claims
Xt = vector('numeric',length = n1)
for (i in 1:n1){
xt = rpois(1,lambda=mu) #number of claims is Poisson distributed
Xt[i]=xt
}
#plots 10 realizations of {X(t):t=0,...,59}
plot(NULL, NULL, xlim = c(0, t), ylim = c(0, 110), xlab = "Days", ylab = "Number of claims", main = "X(t) : t=0,...,59", lwd = 2)
x <- c(0, t)
#boundaries for confidence bound, 2 times standard deviation
sdplus <- c(0, mu+2*sqrt(mu))
sdminus <- c(0, mu-2*sqrt(mu))
polygon(c(x, rev(x)), c(sdminus, rev(sdplus)), col = "snow2", border = NA)
for (j in 1:n2){
xt <- rpois(1,lambda = mu)
W <- sort(runif(n = xt, min = 0, max = t)) #waiting times are uniformly distributed, sorted in ascending order
x_val <- c(0:xt, xt)
for (k in 1:(xt-1)){
lines(W[k:(k+1)], rep(x_val[k],2), col = j, lwd = 2)
}
lines(c(W[xt], t),rep(x_val[xt],2), col = j, lwd = 2)
}
#mean and legend
lines(x, c(0, mu), col = "red", lwd = 2)
legend('topleft', col = c("red", "snow2"), legend = c("Mean", "Condfidence bound, 2 standard deviations"), lwd = 2)
legend('topleft', col = c("red", "snow2"), legend = c("Mean", "Condfidence bound, 2 SD"), lwd = 2)
n1 = 1000 #total simulations to estimate P{X(t)<100}
n2 = 10 #simulations to plot
lambda = 1.5 #rate parameter
t = 59 #days until March 1st
mu = lambda*t
#vector to store number of claims
Xt = vector('numeric',length = n1)
for (i in 1:n1){
xt = rpois(1,lambda=mu) #number of claims is Poisson distributed
Xt[i]=xt
}
#plots 10 realizations of {X(t):t=0,...,59}
plot(NULL, NULL, xlim = c(0, t), ylim = c(0, 110), xlab = "Days", ylab = "Number of claims", main = "X(t) : t=0,...,59", lwd = 2)
x <- c(0, t)
#boundaries for confidence bound, 2 times standard deviation
sdplus <- c(0, mu+2*sqrt(mu))
sdminus <- c(0, mu-2*sqrt(mu))
polygon(c(x, rev(x)), c(sdminus, rev(sdplus)), col = "snow2", border = NA)
colors = c('antiquewhite3','aquamarine2','chartreuse3','cornflowerblue','darkmagenta','darkorange3','darkslategray','gray15','hotpink1')
for (j in 1:n2){
xt <- rpois(1,lambda = mu)
W <- sort(runif(n = xt, min = 0, max = t)) #waiting times are uniformly distributed, sorted in ascending order
x_val <- c(0:xt, xt)
for (k in 1:(xt-1)){
lines(W[k:(k+1)], rep(x_val[k],2), col = colors[j], lwd = 2)
}
lines(c(W[xt], t),rep(x_val[xt],2), col = colors[j], lwd = 2)
}
#mean and legend
lines(x, c(0, mu), col = "red", lwd = 2)
legend('topleft', col = c("red", "snow2"), legend = c("Mean", "Condfidence bound, 2 SD"), lwd = 2)
#estimates P{X(59)>100} as proportion of simulations where Xt[i]>100
P = length(Xt[Xt>100])/n1
print(P)
n = 1000 #simulations
t = 59 #days
lambda = 1.5 #rate of Poisson
mu = lamba*t
gamma = 10 #rate of exponential
#vector to store total claim amounts
Z = vector('numeric',length=n)
for (i in 1:n){
xt = rpois(1,lambda=mu)
c = rexp(xt,rate=gamma)
Z[i] = sum(c)
}
E_Z = mean(Z)
Var_Z = var(Z)
print(c('Expected total claim amount by March 1st:',E_Z))
print(c('Variance of total claim amount by March 1st:',Var_Z))
print(c('Expected total claim amount by March 1st:',round(E_Z,3)))
print(c('Variance of total claim amount by March 1st:',round(Var_Z,3)))
print(c("EstimatedP{X(59)>100}:",P))
days = 365 #days
yrs= 50
n=days*yrs
alpha = 0.01 #P_(31)
beta = 0.05 #P_(12)
gamma = 0.1 #P_(23)
#initalizes transition matrix P:
P = matrix(0,nrow= 3,ncol = 3)
P[1,1]=1-beta
P[1,2]=beta
P[2,2]=1-gamma
P[2,3]=gamma
P[3,1]=alpha
P[3,3]=1-alpha
x = vector('numeric',length=2) #vector to save current and next state
x[1]=1
#vectors to store timesteps between occurrences
tToI = vector('numeric',length=n)
tToR= vector('numeric',length=n)
tToS = vector('numeric',length=n)
c = 1 #number of current cycle
for (i in 1:n){
p = runif(1)
#finds next state
if(p <= P[x[1],1]){
x[2] = 1
}
else if(p> (1-P[x[1],2])){
x[2]=2
}
else{
x[2] = 3
}
#counts timesteps depending on state
if(x[1] == 1){
tToI[c] = tToI[c]+1
tToR[c] = tToR[c]+1
tToS[c] = tToS[c]+1
}
if(x[1]==2){
tToR[c] = tToR[c]+1
tToS[c] = tToS[c]+1
}
if(x[1]==3){
tToS[c] = tToS[c]+1
if(x[2]==1){
c = c+1 #updates number of current cycle when individual reaches state 1
}
}
x[1]=x[2]
}
#estimates expected values by mean
E_tToI = mean(tToI[tToI>0])
E_tToR = mean(tToR[tToR>0])
E_tToS = mean(tToS[tToS>0])
print(c('Estimated time til X_n=I | X_0=S:',E_tToI))
print(c('Estimated time til X_n=R | X_0=S:',E_tToR))
print(c('Estimated time til X_n=S | X_(n-1)=R,X_0=S:',E_tToS))
print(c('Estimated time til X_n=I | X_0=S:',round(E_tToI,2)))
print(c('Estimated time til X_n=R | X_0=S:',round(E_tToR,2)))
print(c('Estimated time til X_n=S | X_(n-1)=R,X_0=S:',round(E_tToS,2)))
days = 365 #days
yrs= 50
n=days*yrs
alpha = 0.01 #P_(31)
beta = 0.05 #P_(12)
gamma = 0.1 #P_(23)
#initalizes transition matrix P:
P = matrix(0,nrow= 3,ncol = 3)
P[1,1]=1-beta
P[1,2]=beta
P[2,2]=1-gamma
P[2,3]=gamma
P[3,1]=alpha
P[3,3]=1-alpha
x = vector('numeric',length=2) #vector to save current and next state
x[1]=1
#vectors to store timesteps between occurrences
tToI = vector('numeric',length=n)
tToR= vector('numeric',length=n)
tToS = vector('numeric',length=n)
c = 1 #number of current cycle
for (i in 1:n){
p = runif(1)
#finds next state
if(p <= P[x[1],1]){
x[2] = 1
}
else if(p> (1-P[x[1],2])){
x[2]=2
}
else{
x[2] = 3
}
#counts timesteps depending on state
if(x[1] == 1){
tToI[c] = tToI[c]+1
tToR[c] = tToR[c]+1
tToS[c] = tToS[c]+1
}
if(x[1]==2){
tToR[c] = tToR[c]+1
tToS[c] = tToS[c]+1
}
if(x[1]==3){
tToS[c] = tToS[c]+1
if(x[2]==1){
c = c+1 #updates number of current cycle when individual reaches state 1
}
}
x[1]=x[2]
}
#estimates expected values by mean
E_tToI = mean(tToI[tToI>0])
E_tToR = mean(tToR[tToR>0])
E_tToS = mean(tToS[tToS>0])
print(c('Estimated time til X_n=I | X_0=S:',round(E_tToI,2)))
print(c('Estimated time til X_n=R | X_0=S:',round(E_tToR,2)))
print(c('Estimated time til X_n=S | X_(n-1)=R,X_0=S:',round(E_tToS,2)))
days = 365 #days
yrs= 50
n=days*yrs
alpha = 0.01 #P_(31)
beta = 0.05 #P_(12)
gamma = 0.1 #P_(23)
#initalizes transition matrix P:
P = matrix(0,nrow= 3,ncol = 3)
P[1,1]=1-beta
P[1,2]=beta
P[2,2]=1-gamma
P[2,3]=gamma
P[3,1]=alpha
P[3,3]=1-alpha
x = vector('numeric',length=2) #vector to save current and next state
x[1]=1
#vectors to store timesteps between occurrences
tToI = vector('numeric',length=n)
tToR= vector('numeric',length=n)
tToS = vector('numeric',length=n)
c = 1 #number of current cycle
for (i in 1:n){
p = runif(1)
#finds next state
if(p <= P[x[1],1]){
x[2] = 1
}
else if(p> (1-P[x[1],2])){
x[2]=2
}
else{
x[2] = 3
}
#counts timesteps depending on state
if(x[1] == 1){
tToI[c] = tToI[c]+1
tToR[c] = tToR[c]+1
tToS[c] = tToS[c]+1
}
if(x[1]==2){
tToR[c] = tToR[c]+1
tToS[c] = tToS[c]+1
}
if(x[1]==3){
tToS[c] = tToS[c]+1
if(x[2]==1){
c = c+1 #updates number of current cycle when individual reaches state 1
}
}
x[1]=x[2]
}
#estimates expected values by mean
E_tToI = mean(tToI[tToI>0])
E_tToR = mean(tToR[tToR>0])
E_tToS = mean(tToS[tToS>0])
print(c('Estimated time til X_n=I | X_0=S:',round(E_tToI,2)))
print(c('Estimated time til X_n=R | X_0=S:',round(E_tToR,2)))
print(c('Estimated time til X_n=S | X_(n-1)=R,X_0=S:',round(E_tToS,2)))
n = 36500 #days
alpha = 0.01 #P_(31)
gamma = 0.1 #P_(23)
N = 1000 #population size
#initializes matrix to store states with Y_o. (S,I,R)=(1,2,3)
Y_n = matrix(0,nrow=3,ncol=n+1)
Y_n[1,1]=950
Y_n[2,1]=50
for (i in 1:n){
beta = Y_n[2,i]/(2*N) #P_(12)
StoI = rbinom(1,Y_n[1,i],beta)
ItoR = rbinom(1,Y_n[2,i],gamma)
RtoS = rbinom(1,Y_n[3,i],alpha)
Y_n[1,i+1] = Y_n[1,i] - StoI + RtoS
Y_n[2,i+1] = Y_n[2,i] - ItoR + StoI
Y_n[3,i+1] = Y_n[3,i] - RtoS + ItoR
}
#finds proportion in each state in the long run
#first 50 timesteps omitted because of transient phase
S = mean(Y_n[1,50:n+1])/N
I = mean(Y_n[2,50:n+1])/N
R = mean(Y_n[3,50:n+1])/N
print(c('Proportion of individuals in state S in the long run:',round(S,3)))
print(c('Proportion of individuals in state I in the long run:',round(I,3)))
print(c('Proportion of individuals in state R in the long run:',round(R,3)))
days <- 300 #timesteps
gamma <- 0.1 #P_(23)
alpha <- 0.01 #P_(31)
N <- 1000 #population size
n <- 1000 #simulations
#vectors to store maximum infected value and timesteps until it is reached
maxIn = vector('numeric',length=n)
tToMaxI = vector('numeric',length=n)
for (j in 1:n){
#initializes vector with starting distribution
Y_n <- vector("numeric", length = 3)
Y_n[1] <- 950
Y_n[2] <- 50
#initializes maxI and timesteps
maxI = 50
tsteps = 0
for (i in 1:(days-1)){
beta = Y_n[2]/(2*N) #P_(12)
StoI = rbinom(1,Y_n[1],beta)
ItoR = rbinom(1,Y_n[2],gamma)
RtoS = rbinom(1,Y_n[3],alpha)
Y_n[1] = Y_n[1] - StoI + RtoS
Y_n[2] = Y_n[2] - ItoR + StoI
Y_n[3] = Y_n[3] - RtoS + ItoR
#checks and updates max and timesteps
if (maxI < Y_n[2]){
maxI = Y_n[2]
tsteps = i
}
}
#stores values for current simulation
maxIn[j]=maxI
tToMaxI[j]=tsteps
}
#Mean as estimates of expected values
E_MaxI = mean(maxIn)
E_tToMaxI = mean(tToMaxI)
print(c('Expected maximum number of individuals:',round(E_MaxI,2)))
print(c('Expected time until maximum number of individuals is reached:',round(E_tToI,2)))
days <- 300 #timesteps
gamma <- 0.1 #P_(23)
alpha <- 0.01 #P_(31)
N <- 1000 #population size
n <- 1000 #simulations
#vectors to store maximum infected value and timesteps until it is reached
maxIn = vector('numeric',length=n)
tToMaxI = vector('numeric',length=n)
for (j in 1:n){
#initializes vector with starting distribution
Y_n <- vector("numeric", length = 3)
Y_n[1] <- 950
Y_n[2] <- 50
#initializes maxI and timesteps
maxI = 50
tsteps = 0
for (i in 1:(days-1)){
beta = Y_n[2]/(2*N) #P_(12)
StoI = rbinom(1,Y_n[1],beta)
ItoR = rbinom(1,Y_n[2],gamma)
RtoS = rbinom(1,Y_n[3],alpha)
Y_n[1] = Y_n[1] - StoI + RtoS
Y_n[2] = Y_n[2] - ItoR + StoI
Y_n[3] = Y_n[3] - RtoS + ItoR
#checks and updates max and timesteps
if (maxI < Y_n[2]){
maxI = Y_n[2]
tsteps = i
}
}
#stores values for current simulation
maxIn[j]=maxI
tToMaxI[j]=tsteps
}
#Mean as estimates of expected values
E_MaxI = mean(maxIn)
E_tToMaxI = mean(tToMaxI)
print(c('Expected maximum number of individuals:',round(E_MaxI,2)))
print(c('Expected time until maximum number of individuals is reached:',round(E_tToI,2)))
days <- 300 #timesteps
gamma <- 0.1 #P_(23)
alpha <- 0.01 #P_(31)
N <- 1000 #population size
n <- 1000 #simulations
#vectors to store maximum infected value and timesteps until it is reached
maxIn = vector('numeric',length=n)
tToMaxI = vector('numeric',length=n)
for (j in 1:n){
#initializes vector with starting distribution
Y_n <- vector("numeric", length = 3)
Y_n[1] <- 950
Y_n[2] <- 50
#initializes maxI and timesteps
maxI = 50
tsteps = 0
for (i in 1:(days-1)){
beta = Y_n[2]/(2*N) #P_(12)
StoI = rbinom(1,Y_n[1],beta)
ItoR = rbinom(1,Y_n[2],gamma)
RtoS = rbinom(1,Y_n[3],alpha)
Y_n[1] = Y_n[1] - StoI + RtoS
Y_n[2] = Y_n[2] - ItoR + StoI
Y_n[3] = Y_n[3] - RtoS + ItoR
#checks and updates max and timesteps
if (maxI < Y_n[2]){
maxI = Y_n[2]
tsteps = i
}
}
#stores values for current simulation
maxIn[j]=maxI
tToMaxI[j]=tsteps
}
#Mean as estimates of expected values
E_MaxI = mean(maxIn)
E_tToMaxI = mean(tToMaxI)
print(c('Expected maximum number of individuals:',round(E_MaxI,2)))
print(c('Expected time until maximum number of individuals is reached:',round(E_tToI,2)))
days <- 300 #timesteps
gamma <- 0.1 #P_(23)
alpha <- 0.01 #P_(31)
N <- 1000 #population size
n <- 1000 #simulations
#vectors to store maximum infected value and timesteps until it is reached
maxIn = vector('numeric',length=n)
tToMaxI = vector('numeric',length=n)
for (j in 1:n){
#initializes vector with starting distribution
Y_n <- vector("numeric", length = 3)
Y_n[1] <- 950
Y_n[2] <- 50
#initializes maxI and timesteps
maxI = 50
tsteps = 0
for (i in 1:(days-1)){
beta = Y_n[2]/(2*N) #P_(12)
StoI = rbinom(1,Y_n[1],beta)
ItoR = rbinom(1,Y_n[2],gamma)
RtoS = rbinom(1,Y_n[3],alpha)
Y_n[1] = Y_n[1] - StoI + RtoS
Y_n[2] = Y_n[2] - ItoR + StoI
Y_n[3] = Y_n[3] - RtoS + ItoR
#checks and updates max and timesteps
if (maxI < Y_n[2]){
maxI = Y_n[2]
tsteps = i
}
}
#stores values for current simulation
maxIn[j]=maxI
tToMaxI[j]=tsteps
}
#Mean as estimates of expected values
E_MaxI = mean(maxIn)
E_tToMaxI = mean(tToMaxI)
print(c('Expected maximum number of individuals:',round(E_MaxI,2)))
print(c('Expected time until maximum number of individuals is reached:',round(E_tToI,2)))
days <- 300 #timesteps
gamma <- 0.1 #P_(23)
alpha <- 0.01 #P_(31)
N <- 1000 #population size
n <- 1000 #simulations
#vectors to store maximum infected value and timesteps until it is reached
maxIn = vector('numeric',length=n)
tToMaxI = vector('numeric',length=n)
for (j in 1:n){
#initializes vector with starting distribution
Y_n <- vector("numeric", length = 3)
Y_n[1] <- 950
Y_n[2] <- 50
#initializes maxI and timesteps
maxI = 50
tsteps = 0
for (i in 1:(days-1)){
beta = Y_n[2]/(2*N) #P_(12)
StoI = rbinom(1,Y_n[1],beta)
ItoR = rbinom(1,Y_n[2],gamma)
RtoS = rbinom(1,Y_n[3],alpha)
Y_n[1] = Y_n[1] - StoI + RtoS
Y_n[2] = Y_n[2] - ItoR + StoI
Y_n[3] = Y_n[3] - RtoS + ItoR
#checks and updates max and timesteps
if (maxI < Y_n[2]){
maxI = Y_n[2]
tsteps = i
}
}
#stores values for current simulation
maxIn[j]=maxI
tToMaxI[j]=tsteps
}
#Mean as estimates of expected values
E_MaxI = mean(maxIn)
E_tToMaxI = mean(tToMaxI)
print(c('Expected maximum number of individuals:',round(E_MaxI,2)))
print(c('Expected time until maximum number of individuals is reached:',round(E_tToMaxI,2)))
